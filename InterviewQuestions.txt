Q. Can a destructor be private?
Yes, a destructor can be made private to ensure that objects of the class are not deleted by external code.

#include <iostream>
class A {
private:
  ~A() {}
  friend void deleteA(A* p);
};

void deleteA(A* p) {
  delete p;
}

int main() {
  A *p = new A;
  deleteA(p);

  return 0;
}

Q. Can a constructor be private?
Yes, a constructor can be private. In such cases, you can create instances of the class using other mechanisms like static factory methods, friend functions, or other constructors within the class.

class Puma {
public:
  static Puma create(int a) { return Puma(a); }
private:
  int age;
  Puma(int a) : age(a) {}

  friend Puma createPuma(int a);
};

Puma createPuma(int a) { return Puma(a); }

Q. Can a constructor be virtual?
No, constructors cannot be virtual. Virtual functions are used for runtime polymorphism, but constructors are called at compile time for object initialization.

Q. Can a destructor be virtual?
Yes, a destructor can be virtual. When a base class pointer is used to delete a derived class object, a virtual destructor ensures that the appropriate destructor is called for the derived class. This is crucial for proper cleanup of resources in polymorphic hierarchies.

Q. smart pointer ?